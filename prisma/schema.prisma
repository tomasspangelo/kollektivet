// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Item {
  id           Int      @id @default(autoincrement())
  title        String
  content      String?
  bought       Boolean  @default(false)
  createdBy    User?    @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById  Int?
  finishedBy   User?     @relation(name: "FinishedBy", fields: [finishedById], references: [id])
  finishedById Int?
  pricePayed   Int?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  boughtAt     DateTime?
  kollektiv    Kollektiv @relation(fields:[kollektivId], references: [id])
  kollektivId  Int
}

model Kollektiv {
  id         Int    @id @default(autoincrement())
  navn       String
  adresse    String
  postnummer Int
  poststed   String
  medlemmer  User[]
  items      Item[]
  vaskeliste Vaskeliste?
}

model Vaskeliste {
  id            Int    @id @default(autoincrement())
  rader         Rad[]
  kollektiv     Kollektiv @relation(fields:[kollektivId], references: [id])
  kollektivId   Int
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")  
   jobs       Job[]    
}

model Rad {
  id            Int    @id @default(autoincrement())
  vaskeliste    Vaskeliste @relation(fields:[vaskelisteId], references: [id])
  vaskelisteId  Int
  userJobs      UserJob[]
  week          Int
  year          Int
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
}

model UserJob {
  id          Int     @id @default(autoincrement())
  user        User?    @relation(fields:[userId], references:[id])
  userId      Int?
  job         Job     @relation(fields:[jobId], references:[id])
  jobId       Int
  rad         Rad     @relation(fields:[radId], references:[id])
  radId       Int
  finished    Boolean
  finishedAt  DateTime?
  comment     String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")  
}
model Job {
  id          Int    @id @default(autoincrement())
  name        String
  index       Int
  description String?
  userJobs    UserJob[]
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  vaskeliste  Vaskeliste @relation(fields:[vaskelisteId],references:[id])
  vaskelisteId Int     
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  kollektivet   Kollektiv? @relation(fields: [kollektivId], references: [id])
  kollektivId   Int?
  createdItems  Item[]    @relation("CreatedBy")
  finishedItems Item[]    @relation("FinishedBy")
  jobs          UserJob[]

  @@map(name: "users")
}


model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
